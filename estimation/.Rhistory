geom_line(aes(k,outBET), color = "#4C6085", size = 0.8) +
ylab("s(J)") + xlab("k") +
theme_bw()
colA <- "#F69A79"
colB <- "#F26430"
colC <- "#D2430F"
colD <- "#85DCFF"
colE <- "#0ABAFF"
colF <- "#0084B8"
df_combmuc <- data.frame(x = seq(0,1,0.01), out_BET = outBETmuc, type = "muc")
df_combmub <- data.frame(x = seq(0,1,0.01), out_BET = outBETmub, type = "mub")
df_combmuw <- data.frame(x = seq(0,1,0.01), out_BET = outBETmuw, type = "muw")
df_comb <- rbind(df_combmuc, df_combmub, df_combmuw)
plot_3 <- ggplot(df_comb) +
geom_line(aes(x, out_BET, color = type), size = 0.8) +
scale_color_manual(values = c(colA, colC, colD),
name = NULL,
labels = c(TeX("$\\beta$"), TeX("$\\mu_{m}$"),TeX("$\\mu_{c}$") )) +
theme_bw() +
theme(text = element_text(size = 15),legend.position = c(0.15, 0.8),
legend.text.align = 0) + xlab("") +
ylab("s(J)")
### panel
col <- "#5C5D8D"
plotf <- plot_grid(plot_3 ,
k_plot + ylab("")+
scale_colour_manual(values = c(col)) +
theme(text = element_text(size = 15),legend.position = c(0.15, 0.8),
legend.text.align = 0)  )
Path <- "~/Documentos/PHD/2022/RMT_SIR/Plots/SM/"
muw
mub
N
mug
muc
ggsave(file=paste0(Path,"betaSJ50N0_05mum0_1muc0_1mub0_95mug.pdf"))
#########################################################################
outl_mean <- mub*(muw*(N-1)+1) - mug
k_max = 15
mat <- matrix(1,k_max,3)
for(i in c(1:k_max)){
bet <- rep(mub,N)
bet[1:i] <- bet[1:i] + alp_bet
mubk <- mean(bet)
outl_mean <- mubk *(muw*(N-1)+1) - mug
out_k <- stragBET(i)
jacobian <- (COMMUTING + diag(N)) %*% diag(bet) + MIGRATION -
diag(deaths + alphas + deltas + colSums(MIGRATION))
reout <- max(eigen_mat(jacobian)$re)
mat[i,] <- c(outl_mean, out_k, reout)
}
df_out <- data.frame( k = seq(1,k_max,1), outm = mat[,1], outk = mat[,2], outr = mat[,3] )
df_plot <- reshape2::melt(df_out, id.vars = "k")
df_plot$var2 <- "1"
df_plot[which(df_plot$variable == "outm")]
plot_pred_vs_real <- ggplot(df_plot) +
geom_line(aes(k, value, color = variable, linetype = ), size = 1) +
scale_color_manual(values = c(colA, colC, colD),
name = NULL,
labels = c("Prediction CL", "Prediction LRP ", "Right most eigenvalue") ) +
theme_bw() +
theme(text = element_text(size = 15),legend.position = c(0.3, 0.8),
legend.text.align = 0)
rm(list = ls())
start_time <- Sys.time()
library("parallel")
library("tidyverse")
library("deSolve")
# Esta función está adaptada para su uso con el paquete deSolve, el estándar en
# R para las ODE
Path = "~/INVASIBILITY_THRESHOLD/estimation/"
setwd(Path)
system("R CMD SHLIB model.c")
dyn.load("model.so")
dim = 10
gam1 = 0.0250265
gam2 = 0.146925
trueSD = 1
# We create a vector with the constant parameters.
parms = c(dim+1,gam1,gam2)
# We set the initial conditions to zero.
Y  <- matrix(rnorm(dim,0,1), nrow = 1, ncol=dim)
min_t <- 0
max_t <- 10
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model",
initfunc = "initmod", nout = 1)
# out <- ode(Y, times, func = "derivs",
#            parms = parms, dllname = "model",
#            initfunc = "initmod", nout = 1,
#            outnames = "Sum", initforc = "forcc",
#            forcings = down,
#            fcontrol = list(method = "constant"))
#
ode_o <- data.frame(out)
View(ode_o)
dim = 100
gam1 = 0.0250265
gam2 = 0.146925
trueSD = 1
# We create a vector with the constant parameters.
parms = c(dim+1,gam1,gam2)
# We set the initial conditions to zero.
Y  <- matrix(rnorm(dim,0,1), nrow = 1, ncol=dim)
min_t <- 0
max_t <- 10
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model",
initfunc = "initmod", nout = 1)
# out <- ode(Y, times, func = "derivs",
#            parms = parms, dllname = "model",
#            initfunc = "initmod", nout = 1,
#            outnames = "Sum", initforc = "forcc",
#            forcings = down,
#            fcontrol = list(method = "constant"))
#
ode_o <- data.frame(out)
View(ode_o)
# We create a vector with the constant parameters.
parms = list(dim+1,gam1,gam2)
# We set the initial conditions to zero.
Y  <- matrix(rnorm(dim,0,1), nrow = 1, ncol=dim)
min_t <- 0
max_t <- 10
times <- seq(min_t,max_t, 1)
out <- ode(Y, times, func = "derivs",
parms = parms, dllname = "model",
initfunc = "initmod", nout = 1)
parms
rm(list = ls())
start_time <- Sys.time()
library("parallel")
library("tidyverse")
library("deSolve")
# Esta función está adaptada para su uso con el paquete deSolve, el estándar en
# R para las ODE
Path = "~/INVASIBILITY_THRESHOLD/estimation/"
setwd(Path)
system("R CMD SHLIB model.c")
dyn.load("model.so")
library("deSolve")
time <- seq(0, 200, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(X = 0, Y = 0)
two_comp <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- -X * a + (Y - X) * b + cc
dY <- -Y * a + (X - Y) * b
return(list(c(dX, dY), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = two_comp,
parms = parameters, signal = signal)
plot(out)
signal
library("deSolve")
time <- seq(0, 200, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(X = 0, Y = 0)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- a*(1-X) - b*X
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = two_comp,
parms = parameters, signal = signal)
plot(out)
out
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(X = 0, Y = 0)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- a*(1-X) - b*X
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = two_comp,
parms = parameters, signal = signal)
plot(out)
out
state <- c(X = 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- a*(1-X) - b*X
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = two_comp,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(X = 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- a*(1-X) - b*X
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = two_comp,
parms = parameters, signal = signal)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(X = 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX <- a*(1-X) - (b/cc)*X
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0, 1,  0,  0),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c( 0.1, 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX[1] <- a*(1-X[1]) - (b/cc)*X[1]
dX[2] <- a*(1-X[2]) - (b/cc)*X[2]
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
state <- matrix( 0.1,ncol = 2, nrow =1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX[1] <- a*(1-X[1]) - (b/cc)*X[1]
dX[2] <- a*(1-X[2]) - (b/cc)*X[2]
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
state <- c(X[1] = 0.1, X[2] = 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
dX[1] <- a*(1-X[1]) - (b/cc)*X[1]
dX[2] <- a*(1-X[2]) - (b/cc)*X[2]
return(list(c(dX), c = cc))
})
}
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
ydot <- vector(len = 2)
with(as.list(c(state, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
Hanski <- function(t, y, params, signal){
cc <- signal(time)
ydot <- vector(len = 2)
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(ydot, c = cc))
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
Hanski <- function(t, y, parms, signal){
cc <- signal(time)
ydot <- vector(len = 2)
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(ydot, c = cc))
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
parameters
Hanski <- function(t, y, parms, signal){
cc <- signal(time)
ydot <- vector(len = 2)
a <- parms[1]
b <- parms[2]
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(ydot, c = cc))
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
warnings()
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(y[1] = 0.1, y[2] = 0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(c(dX), c = cc))
})
}
state <- c(y[1] = 0.1, y[2] = 0.1)
state <- c(y= c(0.1,0.1))
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
state
state <- c(0.1,0.1)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(c(dX), c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
Hanski <- function(time, state, parameters, signal){
cc <- signal(time)
with(as.list(c(state, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
Hanski <- function(time, y, parameters, signal){
cc <- signal(time)
ydot <- c()
with(as.list(c(y, parameters)), {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
ydot[2] <- a*(1-y[2]) - (b/cc)*y[2]
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
dim <- 2
Hanski <- function(time, y, parameters, signal){
cc <- signal(time)
ydot <- c()
with(as.list(c(y, parameters)), {
for (i in c(1:dim)) {
ydot[1] <- a*(1-y[1]) - (b/cc)*y[1]
}
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2, c=1)
state <- c(0.1,0.1)
dim <- 2
Hanski <- function(time, y, parameters, signal){
cc <- signal(time)
ydot <- c()
with(as.list(c(y, parameters)), {
for (i in c(1:dim)) {
ydot[i] <- a*(1-y[i]) - (b/cc)*y[i]
}
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2)
state <- c(0.1,0.1)
dim <- 2
Hanski <- function(time, y, parameters, signal){
cc <- signal(time)
ydot <- c()
with(as.list(c(y, parameters)), {
for (i in c(1:dim)) {
ydot[i] <- a*(1-y[i]) - (b/cc)*y[i]
}
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0, 50, 70, 200),
y = c(0.1, 1,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
signal <- approxfun(x = c(0,1,3,5),
y = c(0.1, 0.5,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
rm(list = ls())
start_time <- Sys.time()
library("deSolve")
time <- seq(0, 10, by=1)
parameters <- c(a=0.33, b=0.2)
state <- c(0.1,0.1)
dim <- 2
Hanski <- function(time, y, parameters, signal){
cc <- signal(time)
ydot <- c()
with(as.list(c(y, parameters)), {
for (i in c(1:dim)) {
ydot[i] <- a*(1-y[i]) - (b/cc)*y[i]
}
return(list(ydot, c = cc))
})
}
signal <- approxfun(x = c(0,1,3,5),
y = c(0.1, 0.5,  0.1,  0.1),
method = "constant", rule = 2)
out <- ode(y = state, times = time, func = Hanski,
parms = parameters, signal = signal)
plot(out)
end_time <- Sys.time()
print(paste("time", end_time-star_time))
print(paste("time", end_time-start_time))
